rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidSetup() {
      return request.resource.data.keys().hasAll(['name', 'ownerId', 'createdAt', 'devices'])
        && request.resource.data.name is string
        && request.resource.data.ownerId is string
        && request.resource.data.createdAt is timestamp
        && request.resource.data.devices is list;
    }
    
    function isValidDevice() {
      return request.resource.data.keys().hasAll(['name', 'type', 'ownerId'])
        && request.resource.data.name is string
        && request.resource.data.type is string
        && request.resource.data.ownerId is string;
    }

    function isValidProduct() {
      return request.resource.data.keys().hasAll(['name', 'type', 'modelPath'])
        && request.resource.data.name is string
        && request.resource.data.type is string
        && request.resource.data.modelPath is string;
    }

    // Products - allow read access without authentication
    match /products/{productId} {
      allow read: if true;  // Allow anyone to read products
      allow create: if isSignedIn() && isValidProduct();
      allow update: if isSignedIn() && 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['modelPath', 'lastUpdated']) ||
        (request.auth.token.admin == true));  // Allow updating just the modelPath field if signed in
      allow delete: if isSignedIn() && request.auth.token.admin == true;
    }

    // User profiles
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isOwner(userId);
    }

    // Setups
    match /setups/{setupId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() 
        && isOwner(request.resource.data.ownerId)
        && isValidSetup();
      allow update, delete: if isSignedIn() 
        && isOwner(resource.data.ownerId);
    }

    // Devices
    match /devices/{deviceId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() 
        && isOwner(request.resource.data.ownerId)
        && isValidDevice();
      allow update, delete: if isSignedIn() 
        && isOwner(resource.data.ownerId);
    }

    // Connections
    match /connections/{connectionId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() 
        && exists(/databases/$(database)/documents/devices/$(request.resource.data.sourceDeviceId))
        && exists(/databases/$(database)/documents/devices/$(request.resource.data.targetDeviceId));
    }
  }
} 